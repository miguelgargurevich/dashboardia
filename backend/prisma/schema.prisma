generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  password  String
  role      String   @default("user")
  createdAt DateTime @default(now())
  tickets   Ticket[]
}

model Ticket {
  id          String              @id @default(cuid())
  tipo        String
  estado      String
  sistema     String?
  descripcion String
  solucion    String?
  archivos    String[]
  userId      String?
  createdAt   DateTime            @default(now())
  closedAt    DateTime?
  events      EventToTicket[]
  resources   ResourceToTicket[]
  user        User?               @relation(fields: [userId], references: [id])
  kbs         TicketToKBArticle[]
}

model KBArticle {
  id          String                @id @default(cuid())
  titulo      String
  tipo        String
  categoria   String?
  descripcion String?
  contenido   String
  archivos    String[]
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt
  events      EventToKBArticle[]
  resources   ResourceToKBArticle[]
  tickets     TicketToKBArticle[]
}

model Resource {
  id          String                @id @default(cuid())
  tipo        String
  titulo      String
  descripcion String?
  url         String?
  filePath    String?
  tags        String[]
  categoria   String?
  fechaCarga  DateTime              @default(now())
  events      ResourceToEvent[]
  kbs         ResourceToKBArticle[]
  tickets     ResourceToTicket[]
}

model Event {
  id                 String             @id @default(cuid())
  title              String
  description        String?
  startDate          DateTime
  endDate            DateTime
  location           String?
  createdAt          DateTime           @default(now())
  codigoDana         String?
  diaEnvio           String?
  modo               String?
  nombreNotificacion String?
  query              String?
  validador          String?
  kbs                EventToKBArticle[]
  tickets            EventToTicket[]
  resources          ResourceToEvent[]
}

model TicketToKBArticle {
  ticketId String
  kbId     String
  kb       KBArticle @relation(fields: [kbId], references: [id])
  ticket   Ticket    @relation(fields: [ticketId], references: [id])

  @@id([ticketId, kbId])
}

model ResourceToTicket {
  resourceId String
  ticketId   String
  resource   Resource @relation(fields: [resourceId], references: [id])
  ticket     Ticket   @relation(fields: [ticketId], references: [id])

  @@id([resourceId, ticketId])
}

model ResourceToKBArticle {
  resourceId String
  kbId       String
  kb         KBArticle @relation(fields: [kbId], references: [id])
  resource   Resource  @relation(fields: [resourceId], references: [id])

  @@id([resourceId, kbId])
}

model ResourceToEvent {
  resourceId String
  eventId    String
  event      Event    @relation(fields: [eventId], references: [id])
  resource   Resource @relation(fields: [resourceId], references: [id])

  @@id([resourceId, eventId])
}

model EventToTicket {
  eventId  String
  ticketId String
  event    Event  @relation(fields: [eventId], references: [id])
  ticket   Ticket @relation(fields: [ticketId], references: [id])

  @@id([eventId, ticketId])
}

model EventToKBArticle {
  eventId String
  kbId    String
  event   Event     @relation(fields: [eventId], references: [id])
  kb      KBArticle @relation(fields: [kbId], references: [id])

  @@id([eventId, kbId])
}

model URL {
  id          String   @id @default(cuid())
  titulo      String
  url         String
  descripcion String?
  tema        String   // notificaciones, polizas, tickets, actividades-diarias, emergencias
  tipoContenido String // video, documento, pagina-contenidos, tutorial, referencia
  estado      String   @default("pendiente") // pendiente, revisado, archivado
  prioridad   String   @default("media") // alta, media, baja
  etiquetas   String[]
  agregadoPor String?  // nombre o email de quien agregó
  comentarios String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  fechaRevision DateTime?
}

model Note {
  id          String   @id @default(cuid())
  title       String
  content     String   // Contenido en formato Markdown
  tema        String   // notificaciones, polizas, tickets, actividades-diarias, emergencias, etc
  tipo        String   @default("nota") // procedimiento, manual, guia, nota, checklist, incidente, mantenimiento, reunion, capacitacion
  descripcion String?  // Descripción corta
  tags        String[] // Etiquetas para búsqueda
  context     String?  // Contexto adicional
  keyPoints   String[] // Puntos clave
  status      String   @default("activo") // activo, archivado, borrador, pendiente, en-progreso, completado, cancelado
  
  // Campos adicionales para notas diarias
  date        String?  // YYYY-MM-DD formato (solo para notas diarias)
  priority    String?  // baja, media, alta, critica (solo para notas diarias)
  relatedResources String[] // IDs o nombres de recursos relacionados
  
  userId      String?  // Usuario que creó la nota
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
